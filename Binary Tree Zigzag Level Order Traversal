/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Stack<TreeNode> stack1 = new Stack<>();
        Stack<TreeNode> stack2 = new Stack<>();
        List<List<Integer>> list = new ArrayList<>();
        if(root == null) return list;
        stack1.push(root);
        while(!stack1.isEmpty() || !stack2.isEmpty()){

            List<Integer> arr1 = new ArrayList<Integer>();
                while(!stack1.isEmpty()){
                TreeNode curr =  stack1.pop();
                arr1.add(curr.val);

                if(curr.left!=null) stack2.push(curr.left);
                if(curr.right!=null) stack2.push(curr.right);
            }
            list.add(arr1);
            if(stack1.isEmpty() && stack2.isEmpty()) break;            
            List<Integer> arr2 = new ArrayList<>();
            while(!stack2.isEmpty()){
                
                TreeNode curr2 = stack2.pop();
                arr2.add(curr2.val);
                if(curr2.right!=null) stack1.push(curr2.right);
                if(curr2.left!=null) stack1.push(curr2.left);


            }
            list.add(arr2);



        }
        return list;

    }
}
