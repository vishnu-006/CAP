class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int len  = grid.length;
        if(grid[0][0] == 1 || grid [len-1][len-1] == 1 ){
            return -1;
        }
        return Bfs(grid,0,0);
    }
    public int Bfs(int[][] grid,int i,int j){
        Queue<int[]> line = new LinkedList<>();
        boolean visited [][] = new boolean[grid.length][grid.length];
        int[][] dir = {{-1,-1},{-1,1},{-1,0},{0,-1},{0,1},{1,-1},{1,0},{1,1}};

        visited[i][j] = true;
        line.add(new int [] {i,j});
        int level = 0;
        while(!line.isEmpty()){
            int ln = grid.length;
            int size = line.size();
            level++;
            while(size-->0){
                int [] curr = line.poll();
                if(curr[0]==ln-1 && curr[1] == ln-1){
                    return level;
                }
                for(int k [] : dir){
                    int x  = curr[0] + k[0];
                    int y = curr[1] + k [1];
                    if(x<0 || x>=grid.length || y<0 || y>=grid.length || visited[x][y] == true || grid[x][y]==1){

                        continue;
                    }
                    visited[x][y] = true;
                    line.add(new int[]{x,y});
                }
            }
        }

return -1;
    }
}
