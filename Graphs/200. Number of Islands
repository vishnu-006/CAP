class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;

    }
    public static void dfs(char [][] grid,int r,int c){
        Queue<int []>line = new LinkedList<>();
        line.add(new int []{r,c});
        int dir [][] = {{-1,0},{0,-1},{1,0},{0,1}};
        while(!line.isEmpty()){
            int g [] = line.poll();
            int size = line.size();
            for(int arr [] : dir){
                int x = arr[0]+g[0];
                int y = arr[1] + g[1];
                if(x<0 || x>=grid.length || y<0 || y>=grid[0].length || grid[x][y] == '0'){
                    continue;
                }
                line.add(new int []{x,y});
                grid[x][y] = '0';
            }

        }
    }
}
